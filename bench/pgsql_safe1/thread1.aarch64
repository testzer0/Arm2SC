////
// 3 threads
// latch[2]: an array of bools, addresses 0 through 1
// flag[2]: an array of bools, addresses 2 through 3
// wrong: whether something went wrong, address 4
// stop: signal to stop, address 5
//

////
// repeat:

repeat:
// break out if stop is set
	MOV R1,#5 						;
	LDR R0,[R1]						;
	CBNZ R0,stop 					;

// wait until latch[1] == 1
	MOV R1,#1						;
wait:
	LDR R0,[R1]						;
	CBZ R0,wait						;

// assert (!latch[1] || flag[1])
// just set a variable if neither of the assertions succeeds
	DMB SY 							;
	LDR R0,[R1]						;
	CBZ R0,success					;
	MOV R2,#3						;
	LDR R3,[R2]						;
	CBNZ R3,success					;
// assertion failed: store that info
	MOV R0,#1 						;
	MOV R1,#4						;
	STR R0,[R1]						;

success:
	DMB SY 							;
// latch[1] = 0
	MOV R0,#0 						;
	MOV R1,#1 						;
	STR R0,[R1]						;
// execute code below only if flag[1] = 1
	DMB SY 							;
	MOV R1,#3 						;
	LDR R0,[R1]						;
	CBZ R0,repeat					;
// set flag[1] = 0 and flag[0] = 1
	DMB SY 							;
	MOV R2,#0 						;
	STR R2,[R1]						;
	MOV R2,#1 						;
	MOV R1,#2 						;
	STR R2,[R1]						;
// set latch[0] = 1
	DMB SY 							;
	MOV R1,#0 						;
	STR R2,[R1]						;
// repeat
	CBNZ R0,repeat					;

stop: